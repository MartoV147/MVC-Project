// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedTravel.Data;

namespace SharedTravel.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210611181815_PendingInvites")]
    partial class PendingInvites
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SharedTravel.Models.PendingInvite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("PendingInvites");
                });

            modelBuilder.Entity("SharedTravel.Models.Travel", b =>
                {
                    b.Property<int>("TravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FreeSeatsCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TravelId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Travels");

                    b.HasData(
                        new
                        {
                            TravelId = 1,
                            AddressFrom = "bul Bulgaria 236c",
                            AddressTo = "bul Slivnica 156a",
                            ArrivalTime = new DateTime(2021, 6, 11, 21, 18, 14, 553, DateTimeKind.Local).AddTicks(2869),
                            CityFrom = "Plovdiv",
                            CityTo = "Sofia",
                            CreatorId = 2,
                            DepartureTime = new DateTime(2021, 6, 11, 21, 18, 14, 550, DateTimeKind.Local).AddTicks(8811),
                            FreeSeatsCount = 4,
                            Price = 5m
                        });
                });

            modelBuilder.Entity("SharedTravel.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Martin",
                            LastName = "Vasilev",
                            Password = "gladitorianpass",
                            Username = "gladitorian"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Nikola",
                            LastName = "Valchanov",
                            Password = "nikipass",
                            Username = "nikiv"
                        });
                });

            modelBuilder.Entity("SharedTravel.Models.UserTravel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TravelId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TravelId");

                    b.HasIndex("TravelId");

                    b.ToTable("UserTravels");
                });

            modelBuilder.Entity("SharedTravel.Models.PendingInvite", b =>
                {
                    b.HasOne("SharedTravel.Models.Travel", "Travel")
                        .WithMany("PendingInvites")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedTravel.Models.User", "User")
                        .WithMany("PendingInvites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Travel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedTravel.Models.Travel", b =>
                {
                    b.HasOne("SharedTravel.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SharedTravel.Models.UserTravel", b =>
                {
                    b.HasOne("SharedTravel.Models.Travel", "Travel")
                        .WithMany("UserTravels")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedTravel.Models.User", "User")
                        .WithMany("UserTravels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Travel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedTravel.Models.Travel", b =>
                {
                    b.Navigation("PendingInvites");

                    b.Navigation("UserTravels");
                });

            modelBuilder.Entity("SharedTravel.Models.User", b =>
                {
                    b.Navigation("PendingInvites");

                    b.Navigation("UserTravels");
                });
#pragma warning restore 612, 618
        }
    }
}
